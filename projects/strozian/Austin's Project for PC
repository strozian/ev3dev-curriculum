import traceback

import ev3dev.ev3 as ev3
import time

import robot_controller as robo

import tkinter
from tkinter import ttk

import mqtt_remote_method_calls as com





def main():
    find_and_go_to_color()




def find_and_go_to_color():
    # Done: 2. Setup an mqtt_client.  Notice that since you don't need to receive any messages you do NOT need to have
    # a MyDelegate class.  Simply construct the MqttClient with no parameter in the constructor (easy).
    mqtt_client = com.MqttClient()
    mqtt_client.connect_to_ev3()

    root = tkinter.Tk()
    root.title("MQTT Remote")

    main_frame = ttk.Frame(root, padding=20, relief='raised')
    main_frame.grid()

    left_speed_label = ttk.Label(main_frame, text="Left")
    left_speed_label.grid(row=0, column=0)
    left_speed_entry = ttk.Entry(main_frame, width=8)
    left_speed_entry.insert(0, "600")
    left_speed_entry.grid(row=1, column=0)

    right_speed_label = ttk.Label(main_frame, text="Right")
    right_speed_label.grid(row=0, column=2)
    right_speed_entry = ttk.Entry(main_frame, width=8, justify=tkinter.RIGHT)
    right_speed_entry.insert(0, "600")
    right_speed_entry.grid(row=1, column=2)

    # Done: 3. Implement the callbacks for the drive buttons. Set both the click and shortcut key callbacks.
    #
    # To help get you started the arm up and down buttons have been implemented.
    # You need to implement the five drive buttons.  One has been writen below to help get you started but is commented
    # out. You will need to change some_callback1 to some better name, then pattern match for other button / key combos.

    forward_button = ttk.Button(main_frame, text="Forward")
    forward_button.grid(row=2, column=1)
    forward_button['command'] = lambda: drive_forward(mqtt_client, int(right_speed_entry.get()),
                                                      int(left_speed_entry.get()))
    root.bind('<Up>',
              lambda event: drive_forward(mqtt_client, int(right_speed_entry.get()), int(left_speed_entry.get())))

    left_button = ttk.Button(main_frame, text="Left")
    left_button.grid(row=3, column=0)
    # left_button and '<Left>' key
    left_button['command'] = lambda: drive_left(mqtt_client, int(right_speed_entry.get()), int(left_speed_entry.get()))
    root.bind('<Left>',
              lambda event: drive_left(mqtt_client, int(right_speed_entry.get()), int(left_speed_entry.get())))

    stop_button = ttk.Button(main_frame, text="Stop")
    stop_button.grid(row=3, column=1)
    # stop_button and '<space>' key (note, does not need left_speed_entry, right_speed_entry)
    stop_button['command'] = lambda: stop(mqtt_client)
    root.bind('<space>', lambda event: stop(mqtt_client))

    right_button = ttk.Button(main_frame, text="Right")
    right_button.grid(row=3, column=2)
    # right_button and '<Right>' key
    right_button['command'] = lambda: drive_right(mqtt_client, int(right_speed_entry.get()),
                                                  int(left_speed_entry.get()))
    root.bind('<Right>',
              lambda event: drive_right(mqtt_client, int(right_speed_entry.get()), int(left_speed_entry.get())))

    back_button = ttk.Button(main_frame, text="Back")
    back_button.grid(row=4, column=1)
    # back_button and '<Down>' key
    back_button['command'] = lambda: drive_backward(mqtt_client, int(right_speed_entry.get()),
                                                    int(left_speed_entry.get()))
    root.bind('<Down>',
              lambda event: drive_backward(mqtt_client, int(right_speed_entry.get()), int(left_speed_entry.get())))

    up_button = ttk.Button(main_frame, text="Up")
    up_button.grid(row=5, column=0)
    up_button['command'] = lambda: send_up(mqtt_client)
    root.bind('<u>', lambda event: send_up(mqtt_client))

    down_button = ttk.Button(main_frame, text="Down")
    down_button.grid(row=6, column=0)
    down_button['command'] = lambda: send_down(mqtt_client)
    root.bind('<j>', lambda event: send_down(mqtt_client))

    # Buttons for quit and exit
    q_button = ttk.Button(main_frame, text="Quit")
    q_button.grid(row=5, column=2)
    q_button['command'] = (lambda: quit_program(mqtt_client, False))

    e_button = ttk.Button(main_frame, text="Exit")
    e_button.grid(row=6, column=2)
    e_button['command'] = (lambda: quit_program(mqtt_client, True))

    root.mainloop()

def drive_forward(mqtt_client, right_speed, left_speed):
    print('drive_forward')
    mqtt_client.send_message('drive_forward', [right_speed, left_speed])


def drive_backward(mqtt_client, right_speed, left_speed):
    print('drive_backward')
    mqtt_client.send_message('drive_backward', [right_speed, left_speed])


def drive_left(mqtt_client, right_speed, left_speed):
    print('drive_left')
    mqtt_client.send_message('drive_left', [right_speed, left_speed])


def drive_right(mqtt_client, right_speed, left_speed):
    print('drive_right')
    mqtt_client.send_message('drive_right', [right_speed, left_speed])


def stop(mqtt_client):
    print('stop')
    mqtt_client.send_message('stop')


# Arm command callbacks
def send_up(mqtt_client):
    print("arm_up")
    mqtt_client.send_message("arm_up")


def send_down(mqtt_client):
    print("arm_down")
    mqtt_client.send_message("arm_down")


# Quit and Exit button callbacks
def quit_program(mqtt_client, shutdown_ev3):
    if shutdown_ev3:
        print("shutdown")
        mqtt_client.send_message("shutdown")
    mqtt_client.close()
    exit()